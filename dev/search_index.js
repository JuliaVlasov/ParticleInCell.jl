var documenterSearchIndex = {"docs":
[{"location":"vlasov-maxwell/","page":"Vlasov-Maxwell 2D","title":"Vlasov-Maxwell 2D","text":"<<>>= using Plots, LinearAlgebra, ProgressMeter @","category":"page"},{"location":"vlasov-maxwell/","page":"Vlasov-Maxwell 2D","title":"Vlasov-Maxwell 2D","text":"<<>>= using Pkg Pkg.activate(\"/Users/navaro/JuliaProjects/ParticleInCell.jl\") @","category":"page"},{"location":"vlasov-maxwell/","page":"Vlasov-Maxwell 2D","title":"Vlasov-Maxwell 2D","text":"<<>>= using Revise @","category":"page"},{"location":"vlasov-maxwell/","page":"Vlasov-Maxwell 2D","title":"Vlasov-Maxwell 2D","text":"<<>>= using ParticleInCell @","category":"page"},{"location":"vlasov-maxwell/","page":"Vlasov-Maxwell 2D","title":"Vlasov-Maxwell 2D","text":"<<>>= nx        = 128  # nombre de pts suivant x ny        = 16   # nombre de pts suivant y @","category":"page"},{"location":"vlasov-maxwell/","page":"Vlasov-Maxwell 2D","title":"Vlasov-Maxwell 2D","text":"<<>>= alpha = 0.1 kx = 0.5 ky = 0. dimx = 2*pi/kx dimy = 1   poids = dimx * dimy ","category":"page"},{"location":"vlasov-maxwell/","page":"Vlasov-Maxwell 2D","title":"Vlasov-Maxwell 2D","text":"mesh = Mesh( dimx, nx, dimy, ny) fdtd = FDTD(mesh)","category":"page"},{"location":"vlasov-maxwell/","page":"Vlasov-Maxwell 2D","title":"Vlasov-Maxwell 2D","text":"ex = zeros(nx,ny) ey = zeros(nx,ny) bz = zeros(nx,ny) jx = zeros(nx,ny) jy = zeros(nx,ny)","category":"page"},{"location":"vlasov-maxwell/","page":"Vlasov-Maxwell 2D","title":"Vlasov-Maxwell 2D","text":"time  = 0","category":"page"},{"location":"vlasov-maxwell/","page":"Vlasov-Maxwell 2D","title":"Vlasov-Maxwell 2D","text":"for i=1:nx, j=1:ny     fdtd.ex[i,j] = alpha/kx * sin(kx*(mesh.x[i]+mesh.x[i+1])/2) end surface!(fdtd.ex ) @","category":"page"},{"location":"vlasov-maxwell/","page":"Vlasov-Maxwell 2D","title":"Vlasov-Maxwell 2D","text":"<<>>= nbpart = 100nxny particles = Particles(nbpart) landausampling!( particles, alpha, kx ) updatecells!( particles, mesh )","category":"page"},{"location":"vlasov-maxwell/","page":"Vlasov-Maxwell 2D","title":"Vlasov-Maxwell 2D","text":"p = plot(layout=4) histogram!(p[1], particles.pos[:,1], normalize=true, label=\"x\") histogram!(p[2], particles.pos[:,2], normalize=true, label=\"y\") histogram!(p[3], particles.vit[:,1], normalize=true, label=\"vx\") histogram!(p[4], particles.vit[:,2], normalize=true, label=\"vy\") @","category":"page"},{"location":"vlasov-maxwell/","page":"Vlasov-Maxwell 2D","title":"Vlasov-Maxwell 2D","text":"<<>>= compute_current!( jx, jy, fdtd, particles, mesh)","category":"page"},{"location":"vlasov-maxwell/","page":"Vlasov-Maxwell 2D","title":"Vlasov-Maxwell 2D","text":"p = plot(layout=2) surface!(p[1], jx ) surface!(p[2], jy) @","category":"page"},{"location":"vlasov-maxwell/","page":"Vlasov-Maxwell 2D","title":"Vlasov-Maxwell 2D","text":"<<>>= function run( ex, ey, bz, jx, jy, particles, mesh, nstep, dt)","category":"page"},{"location":"vlasov-maxwell/","page":"Vlasov-Maxwell 2D","title":"Vlasov-Maxwell 2D","text":"alpha = 0.1\nkx = 0.5\nlandau_sampling!( particles, alpha, kx )\nupdate_cells!( particles, mesh )\nfdtd = FDTD(mesh)\nfor i=1:nx, j=1:ny\n    fdtd.ex[i,j] = alpha/kx * sin(kx*(mesh.x[i]+mesh.x[i+1])/2)\n    fdtd.ey[i,j] = 0.0\n    fdtd.bz[i,j] = 0.0\nend\ntime = 0\nenergy = [0.5 * log( sum( fdtd.ex.^2) * mesh.dx * mesh.dy)]\nt = Float64[time]\n\n@showprogress 1 for istep in 1:nstep\n\n   istep > 1 && faraday!( bz, fdtd, mesh, 0.5dt ) \n   interpol_eb!( ex, ey, bz, particles, mesh )\n   push_v!( particles, dt )\n   push_x!( particles, mesh, 0.5dt) \n   compute_current!( jx, jy, fdtd, particles, mesh)\n   push_x!( particles, mesh, 0.5dt) \n   faraday!(bz, fdtd, mesh, 0.5dt)\n   ampere_maxwell!(ex, ey, fdtd, mesh, dt)\n   time = time + dt\n   push!(t, time)\n   push!(energy, 0.5 * log( sum(fdtd.ex.^2) * mesh.dx * mesh.dy))\n\nend\n\nt, energy","category":"page"},{"location":"vlasov-maxwell/","page":"Vlasov-Maxwell 2D","title":"Vlasov-Maxwell 2D","text":"end","category":"page"},{"location":"vlasov-maxwell/","page":"Vlasov-Maxwell 2D","title":"Vlasov-Maxwell 2D","text":"dt = 0.01 nstep = 250 @time t, energy = run( ex, ey, bz, jx, jy, particles, mesh, nstep, dt) plot(t, energy, m=:o) @","category":"page"},{"location":"vlasov-maxwell/","page":"Vlasov-Maxwell 2D","title":"Vlasov-Maxwell 2D","text":"<<>>= @","category":"page"},{"location":"functions/#Functions","page":"Functions","title":"Functions","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"Modules = [ParticleInCell]\nOrder   = [:function]","category":"page"},{"location":"functions/#ParticleInCell.ampere_maxwell!-Tuple{Any,Any,Maxwell,Any,Any,Any,Any}","page":"Functions","title":"ParticleInCell.ampere_maxwell!","text":"ampere_maxwell!( ex, ey, solver, bz, dt)\n\nEx^t+dt = Ex^t + dt big( fracpartial Bzpartial y - Jx big)\n\nEy^t+dt = Ey^t - dt big( fracpartial Bzpartial x - Jy big)\n\n\n\n\n\n","category":"method"},{"location":"functions/#ParticleInCell.faraday!-Tuple{Any,Maxwell,Any,Any,Float64}","page":"Functions","title":"ParticleInCell.faraday!","text":"faraday!( bz, solver, ex, ey, dt)\n\n```math Bz^{t+dt} = Bz^{t} + dt (  \\frac{\\partial Ey}{\\partial x}\n\n\\frac{\\partial Ex}{\\partial y})\n\n\n\n\n\n","category":"method"},{"location":"functions/#ParticleInCell.solve!-Tuple{Any,Any,Any}","page":"Functions","title":"ParticleInCell.solve!","text":"Compute electric field from charge density\n\n\n\n\n\n","category":"method"},{"location":"functions/#ParticleInCell.update_positions!-Tuple{Any,Any,Any}","page":"Functions","title":"ParticleInCell.update_positions!","text":"update particle position xp\n\n\n\n\n\n","category":"method"},{"location":"functions/#ParticleInCell.update_velocities!-NTuple{4,Any}","page":"Functions","title":"ParticleInCell.update_velocities!","text":"update particle velocities vp\n\n\n\n\n\n","category":"method"},{"location":"tsi/#Two-stream-instability","page":"Two-stream instability","title":"Two-stream instability","text":"","category":"section"},{"location":"tsi/","page":"Two-stream instability","title":"Two-stream instability","text":"using Plots\nusing Random","category":"page"},{"location":"tsi/","page":"Two-stream instability","title":"Two-stream instability","text":"using ParticleInCell\n\nconst dt = 0.005     # Time step\nconst nt = 10000     # Number of time steps\nconst L  = 20π       #  Domain size \nconst nx = 320       # Number of grid cells\nconst np = nx * 20   # Number of particles\n\n\nmesh = Mesh1D( 0, 20π, nx)\nrng = MersenneTwister(42)\npoisson = Poisson1D( mesh )\nparticles = tsi(rng, mesh, np )\npm = ParticleMeshCoupling1D(particles, mesh)","category":"page"},{"location":"tsi/","page":"Two-stream instability","title":"Two-stream instability","text":"function main()\n\n    mesh = Mesh1D( 0, 20π, nx)\n    poisson = Poisson1D( mesh )\n    rng = MersenneTwister(42)\n    pa = tsi(rng, mesh, np )\n    pm = ParticleMeshCoupling1D(pa, mesh)\n    energy = Float64[]\n    e = zeros(Float64, nx)\n    ρ = zeros(Float64, nx)\n    xmin = mesh.xmin\n    xmax = mesh.xmax\n    \n    for it in 1:nt+1\n        \n        update_positions!(pa, mesh, dt)\n        mat = compute_coeffs(pm, pa)\n        compute_rho!(ρ, mat, mesh, pa)\n        solve!(e, poisson, ρ)\n        update_velocities!(pa, e, mat, dt)\n        push!(energy, 0.5 * sum(e.^2) * mesh.dx) \n\n    end\n\n    energy\n\nend","category":"page"},{"location":"tsi/","page":"Two-stream instability","title":"Two-stream instability","text":"results = main()\nt = (0:nt) .* dt\nplot( t, results, yaxis=:log)","category":"page"},{"location":"contents/#Contents","page":"Contents","title":"Contents","text":"","category":"section"},{"location":"contents/","page":"Contents","title":"Contents","text":"","category":"page"},{"location":"contents/#Index","page":"Contents","title":"Index","text":"","category":"section"},{"location":"contents/","page":"Contents","title":"Contents","text":"","category":"page"},{"location":"landau_damping/#Landau-damping","page":"Landau damping","title":"Landau damping","text":"","category":"section"},{"location":"landau_damping/","page":"Landau damping","title":"Landau damping","text":"using Plots\nusing Random","category":"page"},{"location":"landau_damping/","page":"Landau damping","title":"Landau damping","text":"\nusing ParticleInCell\n\nfunction main(nt, dt)\n    \n    nx = 50\n    np = 10000 * nx\n    mesh = Mesh1D( 0, 4π, nx)\n    poisson = Poisson1D( mesh )\n    rng = MersenneTwister(42)\n    α = 0.5\n    kx = 0.5\n    pa = landau_damping(rng, mesh, np, α, kx )\n    pm = ParticleMeshCoupling1D(pa, mesh)\n    energy = Float64[]\n    e = zeros(Float64, nx)\n    ρ = zeros(Float64, nx)\n    xmin = mesh.xmin\n    xmax = mesh.xmax\n    mat = compute_coeffs(pm, pa)\n    compute_rho!(ρ, mat, mesh, pa)\n    solve!(e, poisson, ρ)\n    for it in 1:nt+1       \n        update_positions!(pa, mesh, dt)\n        mat = compute_coeffs(pm, pa)\n        compute_rho!(ρ, mat, mesh, pa)\n        solve!(e, poisson, ρ)\n        update_velocities!(pa, e, mat, dt)\n        push!(energy, 0.5 * sum(e.^2) * mesh.dx) \n    end\n    energy\nend","category":"page"},{"location":"landau_damping/","page":"Landau damping","title":"Landau damping","text":"nt, dt = 2000, 0.01\nresults = main(nt, dt)\nt = collect(0:nt) .* dt\nplot( t, results, yaxis = :log )","category":"page"},{"location":"maxwell/#Maxwell-solver","page":"Maxwell solver","title":"Maxwell solver","text":"","category":"section"},{"location":"maxwell/","page":"Maxwell solver","title":"Maxwell solver","text":"using Plots","category":"page"},{"location":"maxwell/","page":"Maxwell solver","title":"Maxwell solver","text":"using ParticleInCell\n\ndimx, dimy = 1, 1\nnx, ny = 64, 64\nmd, nd = 2, 2  \ndt = 0.001\nnstep = 1 ÷ dt\nmesh = Mesh( dimx, nx, dimy, ny )\nmaxwell = FDTD( mesh ) \nomega = sqrt((md*pi/dimx)^2+(nd*pi/dimy)^2)\n\nx = 0.5 .* (mesh.x[1:end-1] .+ mesh.x[2:end])\ny = 0.5 .* (mesh.y[1:end-1] .+ mesh.y[2:end]) |> transpose\n\nmaxwell.bz .= - cos.(md*pi*x) .* cos.(nd*pi*y) .* cos(omega*(-0.5*dt))\n    \nsurface(maxwell.bz, aspect_ratio=:equal, zlims=(-1,1))","category":"page"},{"location":"maxwell/","page":"Maxwell solver","title":"Maxwell solver","text":"Ex and Ey are set at t = 0.0\nBz is set at  t = -dt/2","category":"page"},{"location":"maxwell/","page":"Maxwell solver","title":"Maxwell solver","text":"function run(mesh, maxwell, nstep)\n\n    ex = zeros(nx,ny)\n    ey = zeros(nx,ny)\n    bz = zeros(nx,ny)\n    \n    x = 0.5 .* (mesh.x[1:end-1] .+ mesh.x[2:end])\n    y = 0.5 .* (mesh.y[1:end-1] .+ mesh.y[2:end]) |> transpose\n\n    maxwell.bz .= - cos.(md*pi*x) .* cos.(nd*pi*y) .* cos(omega*(-0.5*dt))\n    \n    \n    @gif for istep = 1:nstep # Loop over time\n    \n        faraday!(bz, maxwell, mesh, dt)     \n    \n        ampere_maxwell!(ex, ey, maxwell, mesh, dt) \n    \n        surface(bz, aspect_ratio=:equal, zlims=(-1,1), clims=(-1,1))\n\n    end every (nstep ÷ 100)\n    \n    \nend\n\nrun(mesh, maxwell, 2000)","category":"page"},{"location":"#ParticleInCell.jl","page":"Home","title":"ParticleInCell.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ParticleInCell.jl","category":"page"},{"location":"fdtd/","page":"-","title":"-","text":"L_xL_y","category":"page"},{"location":"fdtd/","page":"-","title":"-","text":"domain dimensions and M,N are integers. $ \\omega = \\sqrt{(\\frac{M\\pi}{Lx})^2+(\\frac{N\\pi}{Ly})^2} $ $ Bz(x,y,t) =   - \\cos(M \\pi \\frac{x}{Lx})  \\cos(N \\pi \\frac{y    }{Ly}) \\cos(\\omega t) $ $ Ex(x,y,t) = \\frac{c^2 N \\pi }{\\omega Ly} cos(M \\pi \\frac{x}{L    x}) \\sin(N \\pi  \\frac{y}{Ly}) \\sin(\\omega t) $ $ Ey(x,y,t) = - \\frac{c^2 M \\pi }{\\omega Lx} \\sin (M \\pi \\frac{    x}{Lx}) \\cos (N \\pi  \\frac{y}{L_y}) \\sin(\\omega t) $","category":"page"},{"location":"fdtd/","page":"-","title":"-","text":"using Pkg\nPkg.activate(\"/Users/navaro/JuliaProjects/ParticleInCell.jl\")","category":"page"},{"location":"fdtd/","page":"-","title":"-","text":"using Plots","category":"page"},{"location":"fdtd/","page":"-","title":"-","text":"using Revise","category":"page"},{"location":"fdtd/","page":"-","title":"-","text":"using ParticleInCell\nusing LinearAlgebra","category":"page"},{"location":"fdtd/","page":"-","title":"-","text":"dimx, dimy = 2π, 2π\nnx, ny = 128, 128\ndt = 1e-3\nnstep = 10\nmesh = Mesh(dimx, nx, dimy, ny)\nfdtd = FDTD(mesh)\nω = sqrt(2)\n\nex = zeros(nx, ny)\ney = zeros(nx, ny)\nbz = zeros(nx, ny)\njx = zeros(nx, ny)\njy = zeros(nx, ny)\n\n# Ex and Ey are set at t = 0.0\n# Bz is set at  t = -dt/2\n\nx = mesh.x[1:nx]\ny = transpose(mesh.y[1:ny])\nxc = ( x[1:nx-1] .+ x[2:nx] ) ./ 2\nyc = transpose( y[1:ny-1] .+ y[2:ny] ) ./ 2\n\nt = 0\nex .= 0\ney .= 0\nt = 0.5dt\nbz .= -cos.(x) .* cos.(y) .* cos(ω * t)\nfdtd.bz .= cos.(xc) .* cos.(yc) .* cos(ω * t)\n\nsol_ex = cos.(x) .* sin.(y) ./ ω\nsol_ey = -sin.(x) .* cos.(y) ./ ω\nsol_bz = -cos.(x) .* cos.(y)\n \nampere_maxwell!(ex, ey, fdtd, mesh, dt)\nt = dt\n@show maximum(abs.(ex .- sol_ex .* sin(ω * t))) \n@show maximum(abs.(ey .- sol_ey .* sin(ω * t))) \n\nfaraday!(bz, maxwell, mesh, dt)\nt = 1.5dt\n\n@show maximum(abs.(bz .- sol_bz .* cos(ω * t)))\nsurface(bz)","category":"page"},{"location":"fdtd/","page":"-","title":"-","text":"","category":"page"},{"location":"types/#Types","page":"Types","title":"Types","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"Modules = [ParticleInCell]\nOrder   = [:type]","category":"page"},{"location":"types/#ParticleInCell.Mesh","page":"Types","title":"ParticleInCell.Mesh","text":"Mesh( dimx, nx, dimy, ny)\n\nGenerate a cartesians mesh on rectangle dimxx dimy with nx x ny points\n\nnx : indices are in [1:nx]\nny : indices are in [1:ny]\ndimx x dimy: mesh area\nx, y : node positions\ndx, dy : step size\n\n\n\n\n\n","category":"type"}]
}
