var documenterSearchIndex = {"docs":
[{"location":"vlasov-maxwell/#Vlasov-Maxwell","page":"Vlasov-Maxwell 2D","title":"Vlasov-Maxwell","text":"","category":"section"},{"location":"vlasov-maxwell/#Landau-damping","page":"Vlasov-Maxwell 2D","title":"Landau damping","text":"","category":"section"},{"location":"vlasov-maxwell/","page":"Vlasov-Maxwell 2D","title":"Vlasov-Maxwell 2D","text":"using Plots, LinearAlgebra","category":"page"},{"location":"vlasov-maxwell/","page":"Vlasov-Maxwell 2D","title":"Vlasov-Maxwell 2D","text":"using ParticleInCell\n\nnx = 128 \nny = 16   \n\nalpha = 0.1\nkx = 0.5\nky = 0.\ndimx = 2*pi/kx\ndimy = 1  \npoids = dimx * dimy \n\nmesh = Mesh( dimx, nx, dimy, ny)\nfdtd = FDTD(mesh)\n\ntime  = 0\n\nfor i=1:nx, j=1:ny\n    fdtd.ex[i,j] = alpha/kx * sin(kx*(mesh.x[i]+mesh.x[i+1])/2)\nend\nsurface!(fdtd.ex )","category":"page"},{"location":"vlasov-maxwell/","page":"Vlasov-Maxwell 2D","title":"Vlasov-Maxwell 2D","text":"nbpart = 100*nx*ny\nparticles = Particles(nbpart)\nlandau_sampling!( particles, alpha, kx )\nupdate_cells!( particles, mesh )\n\np = plot(layout=4)\nhistogram!(p[1], particles.pos[1,:], normalize=true, label=\"x\")\nhistogram!(p[2], particles.pos[2,:], normalize=true, label=\"y\")\nhistogram!(p[3], particles.vit[1,:], normalize=true, label=\"vx\")\nhistogram!(p[4], particles.vit[2,:], normalize=true, label=\"vy\")","category":"page"},{"location":"vlasov-maxwell/","page":"Vlasov-Maxwell 2D","title":"Vlasov-Maxwell 2D","text":"compute_current!( fdtd, particles)\n\np = plot(layout=2)\nsurface!(p[1], fdtd.jx)\nsurface!(p[2], fdtd.jy)","category":"page"},{"location":"vlasov-maxwell/","page":"Vlasov-Maxwell 2D","title":"Vlasov-Maxwell 2D","text":"function run( fdtd, particles, mesh, nstep, dt)\n    \n    alpha = 0.1\n    kx = 0.5\n    landau_sampling!( particles, alpha, kx )\n    update_cells!( particles, mesh )\n    for i=1:nx, j=1:ny\n        fdtd.ex[i,j] = alpha/kx * sin(kx*(mesh.x[i]+mesh.x[i+1])/2)\n        fdtd.ey[i,j] = 0.0\n        fdtd.bz[i,j] = 0.0\n    end\n\n    time = 0\n    energy = Float64[0.5 * log( sum( fdtd.ex.^2) * mesh.dx * mesh.dy)]\n    t = Float64[time]\n    \n    for istep in 1:nstep\n    \n       istep > 1 && faraday!( fdtd, 0.5dt ) \n       interpol_eb!( particles, fdtd )\n       push_v!( particles, dt )\n       push_x!( particles, mesh, 0.5dt) \n       compute_current!( fdtd, particles)\n       push_x!( particles, mesh, 0.5dt) \n       faraday!(fdtd, 0.5dt)\n       ampere_maxwell!(fdtd, dt)\n       time = time + dt\n       push!(t, time)\n       push!(energy, 0.5 * log( sum(fdtd.ex.^2) * mesh.dx * mesh.dy))\n    \n    end\n   \n    t, energy\n    \nend","category":"page"},{"location":"vlasov-maxwell/","page":"Vlasov-Maxwell 2D","title":"Vlasov-Maxwell 2D","text":"dt = 0.01\nnstep = 250\nt, energy = run( fdtd, particles, mesh, nstep, dt)\nplot(t, energy, m=:o)","category":"page"},{"location":"functions/#Functions","page":"Functions","title":"Functions","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"Modules = [ParticleInCell]\nOrder   = [:function]","category":"page"},{"location":"functions/#ParticleInCell.compute_b_from_e!-Tuple{Array{Float64,1},Maxwell1DFEM,Float64,Array{Float64,1}}","page":"Functions","title":"ParticleInCell.compute_b_from_e!","text":"compute_b_from_e!( field_out, maxwell_solver, delta_t, field_in)\n\nCompute Bz from Ey using strong 1D Faraday equation for spline coefficients\n\nB_z^new(x_j) = B_z^old(x_j) - fracDelta tDelta x (E_y(x_j) - E_y(x_j-1)\n\n\n\n\n\n","category":"method"},{"location":"functions/#ParticleInCell.compute_e_from_b!-Tuple{Array{Float64,1},Maxwell1DFEM,Float64,Array{Float64,1}}","page":"Functions","title":"ParticleInCell.compute_e_from_b!","text":"compute_e_from_b!(field_out, maxwell_solver, delta_t, field_in)\n\ncompute Ey from Bz using weak Ampere formulation \n\n\n\n\n\n","category":"method"},{"location":"functions/#ParticleInCell.compute_e_from_j!-Tuple{Array{Float64,1},Maxwell1DFEM,Array{Float64,1},Int64}","page":"Functions","title":"ParticleInCell.compute_e_from_j!","text":"compute_e_from_j!(e, maxwell_solver, current, component)\n\nCompute E_i from j_i integrated over the time interval using weak Ampere formulation\n\n\n\n\n\n","category":"method"},{"location":"functions/#ParticleInCell.compute_rhs_from_function!-Tuple{Array{Float64,1},Maxwell1DFEM,Function,Int64}","page":"Functions","title":"ParticleInCell.compute_rhs_from_function!","text":"computerhsfromfunction(self, func, degree, coefsdofs)\n\nCompute the FEM right-hand-side for a given function f and periodic splines of given degree.\n\nIts components are int f N_i dx where N_i is the B-spline starting at x_i. \n\n\n\n\n\n","category":"method"},{"location":"functions/#ParticleInCell.eval_uniform_periodic_spline_curve-Tuple{Int64,Array{Float64,1}}","page":"Functions","title":"ParticleInCell.eval_uniform_periodic_spline_curve","text":"eval_uniform_periodic_spline_curve( degree, scoef )\n\nEvaluate uniform periodic spline curve defined by coefficients scoef at  knots (which are the grid points) \n\n\n\n\n\n","category":"method"},{"location":"functions/#ParticleInCell.get_cell_and_offset-Tuple{OneDGrid,Any}","page":"Functions","title":"ParticleInCell.get_cell_and_offset","text":"get_cell_and_offset( mesh, x )\n\nGet cell and offset\n\nWe compute the cell indices where the particle is and its relative  normalized position inside the cell\n\n\n\n\n\n","category":"method"},{"location":"functions/#ParticleInCell.get_x-Tuple{OneDGrid,Any}","page":"Functions","title":"ParticleInCell.get_x","text":"get_x( mesh, i )\n\nGet position\n\n\n\n\n\n","category":"method"},{"location":"functions/#ParticleInCell.inner_product-NTuple{4,Any}","page":"Functions","title":"ParticleInCell.inner_product","text":"inner_product( maxwell_solver, coefs1_dofs, coefs2_dofs, degree )\n\nmaxwell_solver : Maxwell solver object\ncoefs1_dofs : Coefficient for each DoF\ncoefs2_dofs : Coefficient for each DoF\n`degree : Specify the degree of the basis functions\n\nreturn squared L2 norm\n\n\n\n\n\n","category":"method"},{"location":"functions/#ParticleInCell.l2norm_squared-Tuple{Any,Any,Any}","page":"Functions","title":"ParticleInCell.l2norm_squared","text":"l2norm_squared(maxwell_solver, coefs_dofs, degree)\n\nCompute square of the L2norm \n\n\n\n\n\n","category":"method"},{"location":"functions/#ParticleInCell.l2norm_squared2-Tuple{Any,Any,Any}","page":"Functions","title":"ParticleInCell.l2norm_squared2","text":"l2norm_squared(maxwell_solver, coefs_dofs, degree)\n\nCompute square of the L2norm \n\n\n\n\n\n","category":"method"},{"location":"functions/#ParticleInCell.l2projection!-Tuple{Array{Float64,1},Maxwell1DFEM,Function,Int64}","page":"Functions","title":"ParticleInCell.l2projection!","text":"l2projection!(coefs_dofs, maxwell, func, degree)\n\nCompute the L2 projection of a given function f on periodic splines  of given degree\n\n\n\n\n\n","category":"method"},{"location":"functions/#ParticleInCell.solve!-Tuple{Any,Any,Any}","page":"Functions","title":"ParticleInCell.solve!","text":"Compute electric field from charge density\n\n\n\n\n\n","category":"method"},{"location":"functions/#ParticleInCell.uniform_bsplines_eval_basis-Tuple{Int64,Float64}","page":"Functions","title":"ParticleInCell.uniform_bsplines_eval_basis","text":"uniform_bsplines_eval_basis( spline_degree, normalized_offset, bspl )\n\nUNIFORM B-SPLINE FUNCTIONS\n\nEvaluate all non vanishing uniform B-Splines in unit cell.\n\nReturns an array with the values of the b-splines of the  requested degree, evaluated at a given cell offset. The cell size is normalized between 0 and 1, thus the offset given must be a number between 0 and 1.\n\nOutput: \n\nbspl(1d+1)= B_d(-(d+1)2+d+x)B_d(-(d+1)2+x)\n\nwith d=spline_degree and x=normalized_offset where B_d=B_d-1*B_0 and B_0=1_-1212 and * is convolution the following FORTRAN code can be used for comparison with  deboor\n\ndo i=-d,d+1\n    t(i+d+1)=real(i,8)\nend do\ncall bsplvb(t,d+1,1,normalized_offset,d+1,out)\n\nWe also have the property (from the symmetry of the B-spline)\n\nout1d+1= B_d(-(d+1)2+xx)B_d(-(d+1)2+d+xx) \n\nwhere xx=1- normalized_offset\n\n\n\n\n\n","category":"method"},{"location":"functions/#ParticleInCell.update_positions!-Tuple{Any,Any,Any}","page":"Functions","title":"ParticleInCell.update_positions!","text":"update particle position xp\n\n\n\n\n\n","category":"method"},{"location":"functions/#ParticleInCell.update_velocities!-NTuple{4,Any}","page":"Functions","title":"ParticleInCell.update_velocities!","text":"update particle velocities vp\n\n\n\n\n\n","category":"method"},{"location":"tsi/#Two-stream-instability","page":"Two-stream instability","title":"Two-stream instability","text":"","category":"section"},{"location":"tsi/","page":"Two-stream instability","title":"Two-stream instability","text":"using Plots\nusing Random","category":"page"},{"location":"tsi/","page":"Two-stream instability","title":"Two-stream instability","text":"using ParticleInCell\n\nconst dt = 0.005     # Time step\nconst nt = 10000     # Number of time steps\nconst L  = 20π       #  Domain size \nconst nx = 320       # Number of grid cells\nconst np = nx * 20   # Number of particles\n\n\nmesh = Mesh1D( 0, 20π, nx)\nrng = MersenneTwister(42)\npoisson = Poisson1D( mesh )\nparticles = tsi(rng, mesh, np )\npm = ParticleMeshCoupling1D(particles, mesh)","category":"page"},{"location":"tsi/","page":"Two-stream instability","title":"Two-stream instability","text":"function main()\n\n    mesh = Mesh1D( 0, 20π, nx)\n    poisson = Poisson1D( mesh )\n    rng = MersenneTwister(42)\n    pa = tsi(rng, mesh, np )\n    pm = ParticleMeshCoupling1D(pa, mesh)\n    energy = Float64[]\n    e = zeros(Float64, nx)\n    ρ = zeros(Float64, nx)\n    xmin = mesh.xmin\n    xmax = mesh.xmax\n    \n    for it in 1:nt+1\n        \n        update_positions!(pa, mesh, dt)\n        mat = compute_coeffs(pm, pa)\n        compute_rho!(ρ, mat, mesh, pa)\n        solve!(e, poisson, ρ)\n        update_velocities!(pa, e, mat, dt)\n        push!(energy, 0.5 * sum(e.^2) * mesh.dx) \n\n    end\n\n    energy\n\nend","category":"page"},{"location":"tsi/","page":"Two-stream instability","title":"Two-stream instability","text":"results = main()\nt = (0:nt) .* dt\nplot( t, results, yaxis=:log)","category":"page"},{"location":"contents/#Contents","page":"Contents","title":"Contents","text":"","category":"section"},{"location":"contents/","page":"Contents","title":"Contents","text":"","category":"page"},{"location":"contents/#Index","page":"Contents","title":"Index","text":"","category":"section"},{"location":"contents/","page":"Contents","title":"Contents","text":"","category":"page"},{"location":"landau_damping/#Landau-damping","page":"Landau damping","title":"Landau damping","text":"","category":"section"},{"location":"landau_damping/","page":"Landau damping","title":"Landau damping","text":"using Plots\nusing Random","category":"page"},{"location":"landau_damping/","page":"Landau damping","title":"Landau damping","text":"\nusing ParticleInCell\n\nfunction main(nt, dt)\n    \n    nx = 50\n    np = 10000 * nx\n    mesh = Mesh1D( 0, 4π, nx)\n    poisson = Poisson1D( mesh )\n    rng = MersenneTwister(42)\n    α = 0.5\n    kx = 0.5\n    pa = landau_damping(rng, mesh, np, α, kx )\n    pm = ParticleMeshCoupling1D(pa, mesh)\n    energy = Float64[]\n    e = zeros(Float64, nx)\n    ρ = zeros(Float64, nx)\n    xmin = mesh.xmin\n    xmax = mesh.xmax\n    mat = compute_coeffs(pm, pa)\n    compute_rho!(ρ, mat, mesh, pa)\n    solve!(e, poisson, ρ)\n    for it in 1:nt+1       \n        update_positions!(pa, mesh, dt)\n        mat = compute_coeffs(pm, pa)\n        compute_rho!(ρ, mat, mesh, pa)\n        solve!(e, poisson, ρ)\n        update_velocities!(pa, e, mat, dt)\n        push!(energy, 0.5 * sum(e.^2) * mesh.dx) \n    end\n    energy\nend","category":"page"},{"location":"landau_damping/","page":"Landau damping","title":"Landau damping","text":"nt, dt = 1000, 0.01\nresults = main(nt, dt)\nt = collect(0:nt) .* dt\nplot( t, results, yaxis = :log )","category":"page"},{"location":"maxwell/#Maxwell-solver","page":"Maxwell solver","title":"Maxwell solver","text":"","category":"section"},{"location":"maxwell/","page":"Maxwell solver","title":"Maxwell solver","text":"L_xL_y domain dimensions and MN are integers\n\n\nomega = sqrt(fracMpiL_x)^2+(fracNpiL_y)^2\n\n\n\nB_z(xyt) =   - cos(M pi fracxL_x)  cos(N pi fracyL_y) cos(omega t)\n\n\n\nE_x(xyt) = fracc^2 N pi omega Ly cos(M pi fracxL_x) sin(N pi  fracyL_y) sin(omega t)\n\n\n\nE_y(xyt) = - fracc^2 M pi omega Lx sin (M pi fracxL_x) cos (N pi  fracyL_y) sin(omega t)\n","category":"page"},{"location":"maxwell/","page":"Maxwell solver","title":"Maxwell solver","text":"using Plots","category":"page"},{"location":"maxwell/","page":"Maxwell solver","title":"Maxwell solver","text":"using ParticleInCell\n\ndimx, dimy = 1, 1\nnx, ny = 64, 64\nmd, nd = 2, 2  \ndt = 0.001\nnstep = 1 ÷ dt\nmesh = Mesh( dimx, nx, dimy, ny )\nmaxwell = FDTD( mesh ) \nomega = sqrt((md*pi/dimx)^2+(nd*pi/dimy)^2)\n\nx = 0.5 .* (mesh.x[1:end-1] .+ mesh.x[2:end])\ny = 0.5 .* (mesh.y[1:end-1] .+ mesh.y[2:end]) |> transpose\n\nmaxwell.bz .= - cos.(md*pi*x) .* cos.(nd*pi*y) .* cos(omega*(-0.5*dt))\n    \nsurface(maxwell.bz, aspect_ratio=:equal, zlims=(-1,1))","category":"page"},{"location":"maxwell/","page":"Maxwell solver","title":"Maxwell solver","text":"Ex and Ey are set at t = 0.0\nBz is set at  t = -dt/2","category":"page"},{"location":"maxwell/","page":"Maxwell solver","title":"Maxwell solver","text":"function run(mesh, maxwell, nstep)\n\n    x = 0.5 .* (mesh.x[1:end-1] .+ mesh.x[2:end])\n    y = 0.5 .* (mesh.y[1:end-1] .+ mesh.y[2:end]) |> transpose\n\n    maxwell.bz .= - cos.(md*pi*x) .* cos.(nd*pi*y) .* cos(omega*(-0.5*dt))\n    \n    \n    @gif for istep = 1:nstep # Loop over time\n    \n        faraday!(maxwell, dt)     \n    \n        ampere_maxwell!(maxwell, dt) \n    \n        surface(maxwell.bz, aspect_ratio=:equal, zlims=(-1,1))\n\n    end every (nstep ÷ 100)\n    \n    \nend\n\nrun(mesh, maxwell, 2000)","category":"page"},{"location":"#ParticleInCell.jl","page":"Home","title":"ParticleInCell.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ParticleInCell.jl","category":"page"},{"location":"types/#Types","page":"Types","title":"Types","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"Modules = [ParticleInCell]\nOrder   = [:type]","category":"page"},{"location":"types/#ParticleInCell.Maxwell1DFEM","page":"Types","title":"ParticleInCell.Maxwell1DFEM","text":"maxwell_solver = MaxwellFEM1D( mesh, degree )\n\n1D Maxwell spline finite element solver on a periodic grid\n\nLx                   : length of Periodic domain\ndelta_x              : cell size\nn_dofs               : number of cells (and grid points)\ns_deg_0              : spline degree 0-forms\ns_deg_1              : spline degree 1-forms\nmass_0               : coefficients of 0-form mass matrix\nmass_1               : coefficients of 1-form mass matrix\neig_mass0            : eigenvalues of circulant 0-form mass matrix\neig_mass1            : eigenvalues of circulant 1-form mass matrix\neig_weak_ampere      : eigenvalues of circulant update matrix for Ampere\neig_weak_poisson     : eigenvalues of circulant update matrix for Poisson\nplan_fw              : fft plan (forward)\nplan_bw              : fft plan (backward)\n\n\n\n\n\n","category":"type"},{"location":"types/#ParticleInCell.OneDGrid","page":"Types","title":"ParticleInCell.OneDGrid","text":"TwoDGrid( xmin, xmax, nx )\n\nSimple structure to store mesh data from 1 to 3 dimensions\n\n\n\n\n\n","category":"type"},{"location":"types/#ParticleInCell.TwoDGrid","page":"Types","title":"ParticleInCell.TwoDGrid","text":"TwoDGrid( dimx, nx, dimy, ny)\n\nGenerate a cartesians mesh on rectangle dimxx dimy with nx x ny points\n\nnx : indices are in [1:nx]\nny : indices are in [1:ny]\ndimx x dimy: mesh area\nx, y : node positions\ndx, dy : step size\n\n\n\n\n\n","category":"type"}]
}
