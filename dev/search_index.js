var documenterSearchIndex = {"docs":
[{"location":"functions/#Functions","page":"Functions","title":"Functions","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"Modules = [ParticleInCell]\nOrder   = [:function]","category":"page"},{"location":"functions/#ParticleInCell.ampere_maxwell!-Tuple{MaxwellSolver,Any,Any,Any}","page":"Functions","title":"ParticleInCell.ampere_maxwell!","text":" ampere_maxwell!( f :: MaxwellSolver, ex, ey, dt )\n\ncompute the electric field vector at t+1 from electrict field at t and magnetic field at t-1/2. Solutions are compute on staggered grid (Ex[i+1/2,j] and Ey[i,j+1/2]) then interpolate. \n\n\n\n\n\n","category":"method"},{"location":"functions/#ParticleInCell.faraday!-Tuple{MaxwellSolver,Any,Any}","page":"Functions","title":"ParticleInCell.faraday!","text":"faraday!( f , bz, dt )\n\nSolve the Faraday equation to compute the magnetic field at t+12 from electric field  at t and magnetic field at t-12.\n\n\n\n\n\n","category":"method"},{"location":"functions/#ParticleInCell.solve!-Tuple{Any,Any,Any}","page":"Functions","title":"ParticleInCell.solve!","text":"Compute electric field from charge density\n\n\n\n\n\n","category":"method"},{"location":"functions/#ParticleInCell.update_positions!-Tuple{Any,Any,Any}","page":"Functions","title":"ParticleInCell.update_positions!","text":"update particle position xp\n\n\n\n\n\n","category":"method"},{"location":"functions/#ParticleInCell.update_velocities!-NTuple{4,Any}","page":"Functions","title":"ParticleInCell.update_velocities!","text":"update particle velocities vp\n\n\n\n\n\n","category":"method"},{"location":"tsi/#Two-stream-instability","page":"Two-stream instability","title":"Two-stream instability","text":"","category":"section"},{"location":"tsi/","page":"Two-stream instability","title":"Two-stream instability","text":"using Plots\nusing Random","category":"page"},{"location":"tsi/","page":"Two-stream instability","title":"Two-stream instability","text":"using ParticleInCell\n\nconst dt = 0.005     # Time step\nconst nt = 10000     # Number of time steps\nconst L  = 20π       #  Domain size \nconst nx = 320       # Number of grid cells\nconst np = nx * 20   # Number of particles\n\n\nmesh = Mesh1D( 0, 20π, nx)\nrng = MersenneTwister(42)\npoisson = Poisson1D( mesh )\nparticles = tsi(rng, mesh, np )\npm = ParticleMeshCoupling1D(particles, mesh)","category":"page"},{"location":"tsi/","page":"Two-stream instability","title":"Two-stream instability","text":"function main()\n\n    mesh = Mesh1D( 0, 20π, nx)\n    poisson = Poisson1D( mesh )\n    rng = MersenneTwister(42)\n    pa = tsi(rng, mesh, np )\n    pm = ParticleMeshCoupling1D(pa, mesh)\n    energy = Float64[]\n    e = zeros(Float64, nx)\n    ρ = zeros(Float64, nx)\n    xmin = mesh.xmin\n    xmax = mesh.xmax\n    \n    for it in 1:nt+1\n        \n        update_positions!(pa, mesh, dt)\n        mat = compute_coeffs(pm, pa)\n        compute_rho!(ρ, mat, mesh, pa)\n        solve!(e, poisson, ρ)\n        update_velocities!(pa, e, mat, dt)\n        push!(energy, 0.5 * sum(e.^2) * mesh.dx) \n\n    end\n\n    energy\n\nend","category":"page"},{"location":"tsi/","page":"Two-stream instability","title":"Two-stream instability","text":"results = main()\nt = (0:nt) .* dt\nplot( t, results, yaxis=:log)","category":"page"},{"location":"contents/#Contents","page":"Contents","title":"Contents","text":"","category":"section"},{"location":"contents/","page":"Contents","title":"Contents","text":"","category":"page"},{"location":"contents/#Index","page":"Contents","title":"Index","text":"","category":"section"},{"location":"contents/","page":"Contents","title":"Contents","text":"","category":"page"},{"location":"landau_damping/#Landau-damping","page":"Landau damping","title":"Landau damping","text":"","category":"section"},{"location":"landau_damping/","page":"Landau damping","title":"Landau damping","text":"using Plots\nusing Random","category":"page"},{"location":"landau_damping/","page":"Landau damping","title":"Landau damping","text":"\nusing ParticleInCell\n\nfunction main(nt, dt)\n    \n    nx = 50\n    np = 10000 * nx\n    mesh = Mesh1D( 0, 4π, nx)\n    poisson = Poisson1D( mesh )\n    rng = MersenneTwister(42)\n    α = 0.5\n    kx = 0.5\n    pa = landau_damping(rng, mesh, np, α, kx )\n    pm = ParticleMeshCoupling1D(pa, mesh)\n    energy = Float64[]\n    e = zeros(Float64, nx)\n    ρ = zeros(Float64, nx)\n    xmin = mesh.xmin\n    xmax = mesh.xmax\n    mat = compute_coeffs(pm, pa)\n    compute_rho!(ρ, mat, mesh, pa)\n    solve!(e, poisson, ρ)\n    for it in 1:nt+1       \n        update_positions!(pa, mesh, dt)\n        mat = compute_coeffs(pm, pa)\n        compute_rho!(ρ, mat, mesh, pa)\n        solve!(e, poisson, ρ)\n        update_velocities!(pa, e, mat, dt)\n        push!(energy, 0.5 * sum(e.^2) * mesh.dx) \n    end\n    energy\nend","category":"page"},{"location":"landau_damping/","page":"Landau damping","title":"Landau damping","text":"nt, dt = 2000, 0.01\nresults = main(nt, dt)\nt = collect(0:nt) .* dt\nplot( t, results, yaxis = :log )","category":"page"},{"location":"maxwell/#Maxwell-solver","page":"Maxwell solver","title":"Maxwell solver","text":"","category":"section"},{"location":"maxwell/","page":"Maxwell solver","title":"Maxwell solver","text":"using Plots","category":"page"},{"location":"maxwell/","page":"Maxwell solver","title":"Maxwell solver","text":"using ParticleInCell\n\ndimx, dimy = 1, 1\nnx, ny = 64, 64\ne0 = 1\nc = 1\nmd, nd = 2, 2  # number of modes along each direction\ndt = 0.001\nnstep = 1 ÷ dt\nmesh = Mesh( dimx, nx, dimy, ny )\nmaxwell = MaxwellSolver( mesh, c, e0) \nomega = c * sqrt((md*pi/dimx)^2+(nd*pi/dimy)^2)\nex = zeros(nx+1,ny+1)\ney = zeros(nx+1,ny+1)\nbz = zeros(nx+1,ny+1)\n\nx = 0.5 .* (mesh.x[1:end-1] .+ mesh.x[2:end])\ny = transpose(0.5 .* (mesh.y[1:end-1] .+ mesh.y[2:end]))\n\nmaxwell.bz .= - cos.(md*pi*x) .* cos.(nd*pi*y) .* cos(omega*(-0.5*dt))\n    \nfaraday!(maxwell, bz, dt)    \nsurface(bz, aspect_ratio=:equal, zlims=(-1,1))","category":"page"},{"location":"maxwell/","page":"Maxwell solver","title":"Maxwell solver","text":"Ex and Ey are set at t = 0.0\nBz is set at  t = -dt/2","category":"page"},{"location":"maxwell/","page":"Maxwell solver","title":"Maxwell solver","text":"function run(nstep)\n    dimx, dimy = 1, 1\n    nx, ny = 64, 64\n    e0 = 1\n    c = 1\n    md, nd = 2, 2  # number of modes along each direction\n    dt = 0.001\n    mesh = Mesh( dimx, nx, dimy, ny )\n    maxwell = MaxwellSolver( mesh, c, e0) \n    omega = c * sqrt((md*pi/dimx)^2+(nd*pi/dimy)^2)\n    ex = zeros(nx+1,ny+1)\n    ey = zeros(nx+1,ny+1)\n    bz = zeros(nx+1,ny+1)\n    \n    x = 0.5 .* (mesh.x[1:end-1] .+ mesh.x[2:end])\n    y = transpose(0.5 .* (mesh.y[1:end-1] .+ mesh.y[2:end]))\n\n    maxwell.bz .= - cos.(md*pi*x) .* cos.(nd*pi*y) .* cos(omega*(-0.5*dt))\n    \n    \n    @gif for istep = 1:nstep # Loop over time\n    \n        faraday!(maxwell, bz, dt)     \n    \n        ampere_maxwell!(maxwell, ex, ey, dt) \n    \n        #p = plot(layout=(1,2))\n        #surface!( p[1,1], ex, aspect_ratio=:equal, zlims=(-1,1))\n        #surface!( p[1,2], ey, aspect_ratio=:equal, zlims=(-1,1))\n        surface(bz, aspect_ratio=:equal, zlims=(-1,1))\n\n        end every (nstep ÷ 100)\n    \n    \nend\n\nrun(2000)","category":"page"},{"location":"#ParticleInCell.jl","page":"Home","title":"ParticleInCell.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ParticleInCell.jl","category":"page"},{"location":"types/#Types","page":"Types","title":"Types","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"Modules = [ParticleInCell]\nOrder   = [:type]","category":"page"},{"location":"types/#ParticleInCell.MaxwellSolver","page":"Types","title":"ParticleInCell.MaxwellSolver","text":" MaxwellSolver(mesh, c, e0)\n\nInitialize a Maxwell solver that uses FDTD numerical method.\n\nc : speed of light\ne0 :  electric permitivity\n\n\n\n\n\n","category":"type"},{"location":"types/#ParticleInCell.Mesh","page":"Types","title":"ParticleInCell.Mesh","text":"Mesh( dimx, nx, dimy, ny)\n\nGenerate a cartesians mesh on rectangle dimxx dimy with nx x ny points\n\nnx : indices are in [1:nx]\nny : indices are in [1:ny]\ndimx x dimy: mesh area\nx, y : node positions\ndx, dy : step size\n\n\n\n\n\n","category":"type"}]
}
